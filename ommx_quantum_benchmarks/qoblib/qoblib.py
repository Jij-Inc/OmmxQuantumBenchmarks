from abc import ABC
from dataclasses import dataclass, field
from typing import Final

import minto
import ommx.v1

from ommx_quantum_benchmarks.qoblib.definitions import BASE_URL, get_instance_tag


@dataclass
class BaseDataset(ABC):
    """Base class for datasets."""

    # Define member variables that are set in subclasses.
    name: str
    description: str
    model_names: list[str] = field(default_factory=list)
    # Define available instances for each model, which will be set in subclasses.
    available_instances: dict[str, list[str]] = field(default_factory=dict)

    def __post_init__(self) -> None:
        """Assert the member variables."""
        # Assert the member variables.
        message_prefix = "[FOR DEVELOPER] "
        assert isinstance(self.name, str) and self.name, (
            message_prefix
            + f"Dataset name must be a non-empty string, but got {self.name}."
        )
        assert (
            isinstance(self.model_names, list)
            and self.model_names
            and all(isinstance(model_name, str) for model_name in self.model_names)
        ), (
            message_prefix
            + f"Dataset model_names must be a non-empty list of strings, but got {self.model_names}."
        )

    def get_instance_url(self, model_name: str, instance_name: str) -> str:
        """Get the URL of the instance data specified by the given model and instance names.

        Args:
            model_name (str): a model name.
            instance_name (str): an instance name.

        Raises:
            ValueError: if the given model name is not valid.

        Returns:
            str: the URL of the instance data.
        """
        if model_name not in self.model_names:
            raise ValueError(
                f"Invalid model name: {model_name}. Choose from {self.model_names}."
            )

        instance_tag = get_instance_tag(
            dataset_name=self.name, model_name=model_name, instance_name=instance_name
        )
        instance_url = f"{BASE_URL}:{instance_tag}"
        return instance_url

    def get_experiment(self, model_name: str, instance_name: str) -> minto.Experiment:
        """Get OMMX data for a specific dataset from the Github Packages.

        Args:
            model_name (str): The name of the model.
            instance_name (str): The name of the instance.

        Returns:
            minto.Experiment: The Minto experiment containing OMMX data.
        """
        instance_url = self.get_instance_url(
            model_name=model_name, instance_name=instance_name
        )
        # Try to load the experiment from the Github Container Registry.
        try:
            experiment = minto.Experiment.load_from_registry(instance_url)
        except RuntimeError as e:
            error_message_1 = f"Invalid instance name: {instance_url}. Choose from the available instances:\n"
            error_message_2 = ""
            for model, instances in self.available_instances.items():
                error_message_2 += f"- Model: {model}, Instances: {', '.join(instances) if instances else 'All available instances'}."
            error_message = f"{error_message_1}{error_message_2}"

            # If the error is 404 not found, raise FileNotFoundError with a user-friendly message.
            if "status code 404" in str(e):
                raise FileNotFoundError(error_message) from e
            else:
                # Raise the original error for other cases.
                raise

        return experiment

    def __call__(
        self, model_name: str, instance_name: str
    ) -> tuple[ommx.v1.Instance, ommx.v1.Solution]:
        """Get the OMMX instance and solution for a specific Labs dataset.

        Args:
            instance_name (str): The name of the instance.
            model (str): The model to use.

        Returns:
            tuple[ommx.v1.Instance, ommx.v1.Solution]: The OMMX instance and solution.
        """
        experiment = self.get_experiment(
            model_name=model_name, instance_name=instance_name
        )
        # Load the only instance in the experiment.
        instances = experiment.get_current_datastore().instances
        # The uploaded instance should be only one. Thus, if this error is raised, it is a bug of the uploader.
        assert (
            len(instances) == 1
        ), f"[FOR DEVELOPER] Number of instances obtained by model_name={model_name} and instance_name={instance_name} is not one: {len(instances)}."
        instance = list(instances.values())[0]

        # Load the only solution in the experiment if it exists.
        solutions = experiment.get_current_datastore().solutions
        # The uploaded solutions should be at most one. Thus, if this error is raised, it is a bug of the uploader.
        assert (
            0 <= len(solutions) <= 1
        ), f"[FOR DEVELOPER] Number of solutions obtained by model_name={model_name} and instance_name={instance_name} is more than one: {len(solutions)}."
        if len(solutions) == 1:
            solution = list(solutions.values())[0]
        else:
            solution = None

        return (instance, solution)


@dataclass
class Marketsplit(BaseDataset):
    """Class representing a market split dataset."""

    name: str = "01_marketsplit"
    description: str = (
        "Marketsplit dataset in ommx format, originally provided by https://git.zib.de/qopt/qoblib-quantum-optimization-benchmarking-library/-/tree/main/01-marketsplit?ref_type=heads."
    )
    model_names: list[str] = field(
        default_factory=lambda: ["binary_linear", "binary_unconstrained"]
    )
    available_instances: dict[str, list[str]] = field(
        default_factory=lambda: {
            "binary_linear": [
                "ms_03_050_002",
                "ms_03_050_005",
                "ms_03_050_007",
                "ms_03_050_009",
                "ms_03_100_001",
                "ms_03_100_012",
                "ms_03_100_019",
                "ms_03_100_022",
                "ms_03_200_050",
                "ms_03_200_068",
                "ms_03_200_161",
                "ms_03_200_177",
                "ms_04_050_001",
                "ms_04_050_003",
                "ms_04_050_004",
                "ms_04_050_005",
                "ms_04_100_003",
                "ms_04_100_009",
                "ms_04_100_013",
                "ms_04_100_015",
                "ms_04_200_030",
                "ms_04_200_150",
                "ms_04_200_174",
                "ms_04_200_176",
                "ms_05_050_001",
                "ms_05_050_002",
                "ms_05_050_003",
                "ms_05_050_004",
                "ms_05_100_003",
                "ms_05_100_006",
                "ms_05_100_013",
                "ms_05_100_015",
                "ms_05_200_070",
                "ms_05_200_095",
                "ms_05_200_180",
                "ms_05_200_199",
                "ms_06_050_001",
                "ms_06_050_002",
                "ms_06_050_003",
                "ms_06_050_004",
                "ms_06_100_002",
                "ms_06_100_003",
                "ms_06_100_005",
                "ms_06_100_010",
                "ms_06_200_077",
                "ms_06_200_104",
                "ms_06_200_240",
                "ms_06_200_289",
                "ms_07_050_001",
                "ms_07_050_002",
                "ms_07_050_003",
                "ms_07_050_004",
                "ms_07_100_002",
                "ms_07_100_003",
                "ms_07_100_005",
                "ms_07_100_006",
                "ms_07_200_248",
                "ms_07_200_370",
                "ms_07_200_398",
                "ms_07_200_500",
                "ms_08_050_000",
                "ms_08_050_001",
                "ms_08_050_002",
                "ms_08_050_003",
                "ms_08_100_000",
                "ms_08_100_001",
                "ms_08_100_002",
                "ms_08_100_003",
                "ms_08_200_000",
                "ms_08_200_001",
                "ms_08_200_002",
                "ms_08_200_003",
                "ms_09_050_000",
                "ms_09_050_001",
                "ms_09_050_002",
                "ms_09_050_003",
                "ms_09_100_000",
                "ms_09_100_001",
                "ms_09_100_002",
                "ms_09_100_003",
                "ms_09_200_000",
                "ms_09_200_001",
                "ms_09_200_002",
                "ms_09_200_003",
                "ms_10_050_000",
                "ms_10_050_001",
                "ms_10_050_002",
                "ms_10_050_003",
                "ms_10_100_000",
                "ms_10_100_001",
                "ms_10_100_002",
                "ms_10_100_003",
                "ms_10_200_000",
                "ms_10_200_001",
                "ms_10_200_002",
                "ms_10_200_003",
                "ms_11_050_000",
                "ms_11_050_001",
                "ms_11_050_002",
                "ms_11_050_003",
                "ms_11_100_000",
                "ms_11_100_001",
                "ms_11_100_002",
                "ms_11_100_003",
                "ms_11_200_000",
                "ms_11_200_001",
                "ms_11_200_002",
                "ms_11_200_003",
                "ms_12_050_000",
                "ms_12_050_001",
                "ms_12_050_002",
                "ms_12_050_003",
                "ms_12_100_000",
                "ms_12_100_001",
                "ms_12_100_002",
                "ms_12_100_003",
                "ms_12_200_000",
                "ms_12_200_001",
                "ms_12_200_002",
                "ms_12_200_003",
                "ms_13_050_000",
                "ms_13_050_001",
                "ms_13_050_002",
                "ms_13_050_003",
                "ms_13_100_000",
                "ms_13_100_001",
                "ms_13_100_002",
                "ms_13_100_003",
                "ms_13_200_000",
                "ms_13_200_001",
                "ms_13_200_002",
                "ms_13_200_003",
                "ms_14_050_000",
                "ms_14_050_001",
                "ms_14_050_002",
                "ms_14_050_003",
                "ms_14_100_000",
                "ms_14_100_001",
                "ms_14_100_002",
                "ms_14_100_003",
                "ms_14_200_000",
                "ms_14_200_001",
                "ms_14_200_002",
                "ms_14_200_003",
                "ms_15_050_000",
                "ms_15_050_001",
                "ms_15_050_002",
                "ms_15_050_003",
                "ms_15_100_000",
                "ms_15_100_001",
                "ms_15_100_002",
                "ms_15_100_003",
                "ms_15_200_000",
                "ms_15_200_001",
                "ms_15_200_002",
                "ms_15_200_003",
            ],
            "binary_unconstrained": [
                "ms_03_050_002",
                "ms_03_050_005",
                "ms_03_050_007",
                "ms_03_050_009",
                "ms_03_100_001",
                "ms_03_100_012",
                "ms_03_100_019",
                "ms_03_100_022",
                "ms_03_200_050",
                "ms_03_200_068",
                "ms_03_200_161",
                "ms_03_200_177",
                "ms_04_050_001",
                "ms_04_050_003",
                "ms_04_050_004",
                "ms_04_050_005",
                "ms_04_100_003",
                "ms_04_100_009",
                "ms_04_100_013",
                "ms_04_100_015",
                "ms_04_200_030",
                "ms_04_200_150",
                "ms_04_200_174",
                "ms_04_200_176",
                "ms_05_050_001",
                "ms_05_050_002",
                "ms_05_050_003",
                "ms_05_050_004",
                "ms_05_100_003",
                "ms_05_100_006",
                "ms_05_100_013",
                "ms_05_100_015",
                "ms_05_200_070",
                "ms_05_200_095",
                "ms_05_200_180",
                "ms_05_200_199",
                "ms_06_050_001",
                "ms_06_050_002",
                "ms_06_050_003",
                "ms_06_050_004",
                "ms_06_100_002",
                "ms_06_100_003",
                "ms_06_100_005",
                "ms_06_100_010",
                "ms_06_200_077",
                "ms_06_200_104",
                "ms_06_200_240",
                "ms_06_200_289",
                "ms_07_050_001",
                "ms_07_050_002",
                "ms_07_050_003",
                "ms_07_050_004",
                "ms_07_100_002",
                "ms_07_100_003",
                "ms_07_100_005",
                "ms_07_100_006",
                "ms_07_200_248",
                "ms_07_200_370",
                "ms_07_200_398",
                "ms_07_200_500",
                "ms_08_050_000",
                "ms_08_050_001",
                "ms_08_050_002",
                "ms_08_050_003",
                "ms_08_100_000",
                "ms_08_100_001",
                "ms_08_100_002",
                "ms_08_100_003",
                "ms_08_200_000",
                "ms_08_200_001",
                "ms_08_200_002",
                "ms_08_200_003",
                "ms_09_050_000",
                "ms_09_050_001",
                "ms_09_050_002",
                "ms_09_050_003",
                "ms_09_100_000",
                "ms_09_100_001",
                "ms_09_100_002",
                "ms_09_100_003",
                "ms_09_200_000",
                "ms_09_200_001",
                "ms_09_200_002",
                "ms_09_200_003",
                "ms_10_050_000",
                "ms_10_050_001",
                "ms_10_050_002",
                "ms_10_050_003",
                "ms_10_100_000",
                "ms_10_100_001",
                "ms_10_100_002",
                "ms_10_100_003",
                "ms_10_200_000",
                "ms_10_200_001",
                "ms_10_200_002",
                "ms_10_200_003",
                "ms_11_050_000",
                "ms_11_050_001",
                "ms_11_050_002",
                "ms_11_050_003",
                "ms_11_100_000",
                "ms_11_100_001",
                "ms_11_100_002",
                "ms_11_100_003",
                "ms_11_200_000",
                "ms_11_200_001",
                "ms_11_200_002",
                "ms_11_200_003",
                "ms_12_050_000",
                "ms_12_050_001",
                "ms_12_050_002",
                "ms_12_050_003",
                "ms_12_100_000",
                "ms_12_100_001",
                "ms_12_100_002",
                "ms_12_100_003",
                "ms_12_200_000",
                "ms_12_200_001",
                "ms_12_200_002",
                "ms_12_200_003",
                "ms_13_050_000",
                "ms_13_050_001",
                "ms_13_050_002",
                "ms_13_050_003",
                "ms_13_100_000",
                "ms_13_100_001",
                "ms_13_100_002",
                "ms_13_100_003",
                "ms_13_200_000",
                "ms_13_200_001",
                "ms_13_200_002",
                "ms_13_200_003",
                "ms_14_050_000",
                "ms_14_050_001",
                "ms_14_050_002",
                "ms_14_050_003",
                "ms_14_100_000",
                "ms_14_100_001",
                "ms_14_100_002",
                "ms_14_100_003",
                "ms_14_200_000",
                "ms_14_200_001",
                "ms_14_200_002",
                "ms_14_200_003",
                "ms_15_050_000",
                "ms_15_050_001",
                "ms_15_050_002",
                "ms_15_050_003",
                "ms_15_100_000",
                "ms_15_100_001",
                "ms_15_100_002",
                "ms_15_100_003",
                "ms_15_200_000",
                "ms_15_200_001",
                "ms_15_200_002",
                "ms_15_200_003",
            ],
        }
    )


@dataclass
class Labs(BaseDataset):
    """Class representing a labs dataset."""

    name: str = "02_labs"
    description: str = (
        "Labs dataset in ommx format, originally provided by https://git.zib.de/qopt/qoblib-quantum-optimization-benchmarking-library/-/tree/main/02-labs?ref_type=heads."
    )
    model_names: list[str] = field(
        default_factory=lambda: ["integer", "quadratic_unconstrained"]
    )
    available_instances: Final[dict[str, list[str]]] = field(
        default_factory=lambda: {
            "integer": [
                "labs002",
                "labs003",
                "labs004",
                "labs005",
                "labs006",
                "labs007",
                "labs008",
                "labs009",
                "labs010",
                "labs011",
                "labs012",
                "labs013",
                "labs014",
                "labs015",
                "labs016",
                "labs017",
                "labs018",
                "labs019",
                "labs020",
                "labs021",
                "labs022",
                "labs023",
                "labs024",
                "labs025",
                "labs026",
                "labs027",
                "labs028",
                "labs029",
                "labs030",
                "labs031",
                "labs032",
                "labs033",
                "labs034",
                "labs035",
                "labs036",
                "labs037",
                "labs038",
                "labs039",
                "labs040",
                "labs041",
                "labs042",
                "labs043",
                "labs044",
                "labs045",
                "labs046",
                "labs047",
                "labs048",
                "labs049",
                "labs050",
                "labs051",
                "labs052",
                "labs053",
                "labs054",
                "labs055",
                "labs056",
                "labs057",
                "labs058",
                "labs059",
                "labs060",
                "labs061",
                "labs062",
                "labs063",
                "labs064",
                "labs065",
                "labs066",
                "labs067",
                "labs068",
                "labs069",
                "labs070",
                "labs071",
                "labs072",
                "labs073",
                "labs074",
                "labs075",
                "labs076",
                "labs077",
                "labs078",
                "labs079",
                "labs080",
                "labs081",
                "labs082",
                "labs083",
                "labs084",
                "labs085",
                "labs086",
                "labs087",
                "labs088",
                "labs089",
                "labs090",
                "labs091",
                "labs092",
                "labs093",
                "labs094",
                "labs095",
                "labs096",
                "labs097",
                "labs098",
                "labs099",
                "labs100",
            ],
            "quadratic_unconstrained": [
                "labs002",
                "labs003",
                "labs004",
                "labs005",
                "labs006",
                "labs007",
                "labs008",
                "labs009",
                "labs010",
                "labs011",
                "labs012",
                "labs013",
                "labs014",
                "labs015",
                "labs016",
                "labs017",
                "labs018",
                "labs019",
                "labs020",
                "labs021",
                "labs022",
                "labs023",
                "labs024",
                "labs025",
                "labs026",
                "labs027",
                "labs028",
                "labs029",
                "labs030",
                "labs031",
                "labs032",
                "labs033",
                "labs034",
                "labs035",
                "labs036",
                "labs037",
                "labs038",
                "labs039",
                "labs040",
                "labs041",
                "labs042",
                "labs043",
                "labs044",
                "labs045",
                "labs046",
                "labs047",
                "labs048",
                "labs049",
                "labs050",
                "labs051",
                "labs052",
                "labs053",
                "labs054",
                "labs055",
                "labs056",
                "labs057",
                "labs058",
                "labs059",
                "labs060",
                "labs061",
                "labs062",
                "labs063",
                "labs064",
                "labs065",
                "labs066",
                "labs067",
                "labs068",
                "labs069",
                "labs070",
                "labs071",
                "labs072",
                "labs073",
                "labs074",
                "labs075",
                "labs076",
                "labs077",
                "labs078",
                "labs079",
                "labs080",
                "labs081",
                "labs082",
                "labs083",
                "labs084",
                "labs085",
                "labs086",
                "labs087",
                "labs088",
                "labs089",
                "labs090",
                "labs091",
                "labs092",
                "labs093",
                "labs094",
                "labs095",
                "labs096",
                "labs097",
                "labs098",
                "labs099",
                "labs100",
            ],
        }
    )


@dataclass
class Birkhoff(BaseDataset):
    """Class representing a Birkhoff dataset."""

    name: str = "03_birkhoff"
    description: str = (
        "Birkhoff dataset in ommx format, originally provided by https://git.zib.de/qopt/qoblib-quantum-optimization-benchmarking-library/-/tree/main/03-birkhoff?ref_type=heads."
    )
    model_names: list[str] = field(default_factory=lambda: ["integer_linear"])
    available_instances: Final[dict[str, list[str]]] = field(
        default_factory=lambda: {
            "integer_linear": [
                "bhD-3-001",
                "bhD-3-002",
                "bhD-3-003",
                "bhD-3-004",
                "bhD-3-005",
                "bhD-3-006",
                "bhD-3-007",
                "bhD-3-008",
                "bhD-3-009",
                "bhD-3-010",
                "bhD-3-011",
                "bhD-3-012",
                "bhD-3-013",
                "bhD-3-014",
                "bhD-3-015",
                "bhD-3-016",
                "bhD-3-017",
                "bhD-3-018",
                "bhD-3-019",
                "bhD-3-020",
                "bhD-3-021",
                "bhD-3-022",
                "bhD-3-023",
                "bhD-3-024",
                "bhD-3-025",
                "bhD-3-026",
                "bhD-3-027",
                "bhD-3-028",
                "bhD-3-029",
                "bhD-3-030",
                "bhD-3-031",
                "bhD-3-032",
                "bhD-3-033",
                "bhD-3-034",
                "bhD-3-035",
                "bhD-3-036",
                "bhD-3-037",
                "bhD-3-038",
                "bhD-3-039",
                "bhD-3-040",
                "bhD-3-041",
                "bhD-3-042",
                "bhD-3-043",
                "bhD-3-044",
                "bhD-3-045",
                "bhD-3-046",
                "bhD-3-047",
                "bhD-3-048",
                "bhD-3-049",
                "bhD-3-050",
                "bhD-3-051",
                "bhD-3-052",
                "bhD-3-053",
                "bhD-3-054",
                "bhD-3-055",
                "bhD-3-056",
                "bhD-3-057",
                "bhD-3-058",
                "bhD-3-059",
                "bhD-3-060",
                "bhD-3-061",
                "bhD-3-062",
                "bhD-3-063",
                "bhD-3-064",
                "bhD-3-065",
                "bhD-3-066",
                "bhD-3-067",
                "bhD-3-068",
                "bhD-3-069",
                "bhD-3-070",
                "bhD-3-071",
                "bhD-3-072",
                "bhD-3-073",
                "bhD-3-074",
                "bhD-3-075",
                "bhD-3-076",
                "bhD-3-077",
                "bhD-3-078",
                "bhD-3-079",
                "bhD-3-080",
                "bhD-3-081",
                "bhD-3-082",
                "bhD-3-083",
                "bhD-3-084",
                "bhD-3-085",
                "bhD-3-086",
                "bhD-3-087",
                "bhD-3-088",
                "bhD-3-089",
                "bhD-3-090",
                "bhD-3-091",
                "bhD-3-092",
                "bhD-3-093",
                "bhD-3-094",
                "bhD-3-095",
                "bhD-3-096",
                "bhD-3-097",
                "bhD-3-098",
                "bhD-3-099",
                "bhD-3-100",
                "bhD-4-001",
                "bhD-4-002",
                "bhD-4-003",
                "bhD-4-004",
                "bhD-4-005",
                "bhD-4-006",
                "bhD-4-007",
                "bhD-4-008",
                "bhD-4-009",
                "bhD-4-010",
                "bhD-4-011",
                "bhD-4-012",
                "bhD-4-013",
                "bhD-4-014",
                "bhD-4-015",
                "bhD-4-016",
                "bhD-4-017",
                "bhD-4-018",
                "bhD-4-019",
                "bhD-4-020",
                "bhD-4-021",
                "bhD-4-022",
                "bhD-4-023",
                "bhD-4-024",
                "bhD-4-025",
                "bhD-4-026",
                "bhD-4-027",
                "bhD-4-028",
                "bhD-4-029",
                "bhD-4-030",
                "bhD-4-031",
                "bhD-4-032",
                "bhD-4-033",
                "bhD-4-034",
                "bhD-4-035",
                "bhD-4-036",
                "bhD-4-037",
                "bhD-4-038",
                "bhD-4-039",
                "bhD-4-040",
                "bhD-4-041",
                "bhD-4-042",
                "bhD-4-043",
                "bhD-4-044",
                "bhD-4-045",
                "bhD-4-046",
                "bhD-4-047",
                "bhD-4-048",
                "bhD-4-049",
                "bhD-4-050",
                "bhD-4-051",
                "bhD-4-052",
                "bhD-4-053",
                "bhD-4-054",
                "bhD-4-055",
                "bhD-4-056",
                "bhD-4-057",
                "bhD-4-058",
                "bhD-4-059",
                "bhD-4-060",
                "bhD-4-061",
                "bhD-4-062",
                "bhD-4-063",
                "bhD-4-064",
                "bhD-4-065",
                "bhD-4-066",
                "bhD-4-067",
                "bhD-4-068",
                "bhD-4-069",
                "bhD-4-070",
                "bhD-4-071",
                "bhD-4-072",
                "bhD-4-073",
                "bhD-4-074",
                "bhD-4-075",
                "bhD-4-076",
                "bhD-4-077",
                "bhD-4-078",
                "bhD-4-079",
                "bhD-4-080",
                "bhD-4-081",
                "bhD-4-082",
                "bhD-4-083",
                "bhD-4-084",
                "bhD-4-085",
                "bhD-4-086",
                "bhD-4-087",
                "bhD-4-088",
                "bhD-4-089",
                "bhD-4-090",
                "bhD-4-091",
                "bhD-4-092",
                "bhD-4-093",
                "bhD-4-094",
                "bhD-4-095",
                "bhD-4-096",
                "bhD-4-097",
                "bhD-4-098",
                "bhD-4-099",
                "bhD-4-100",
                "bhD-5-001",
                "bhD-5-002",
                "bhD-5-003",
                "bhD-5-004",
                "bhD-5-005",
                "bhD-5-006",
                "bhD-5-007",
                "bhD-5-008",
                "bhD-5-009",
                "bhD-5-010",
                "bhD-5-011",
                "bhD-5-012",
                "bhD-5-013",
                "bhD-5-014",
                "bhD-5-015",
                "bhD-5-016",
                "bhD-5-017",
                "bhD-5-018",
                "bhD-5-019",
                "bhD-5-020",
                "bhD-5-021",
                "bhD-5-022",
                "bhD-5-023",
                "bhD-5-024",
                "bhD-5-025",
                "bhD-5-026",
                "bhD-5-027",
                "bhD-5-028",
                "bhD-5-029",
                "bhD-5-030",
                "bhD-5-031",
                "bhD-5-032",
                "bhD-5-033",
                "bhD-5-034",
                "bhD-5-035",
                "bhD-5-036",
                "bhD-5-037",
                "bhD-5-038",
                "bhD-5-039",
                "bhD-5-040",
                "bhD-5-041",
                "bhD-5-042",
                "bhD-5-043",
                "bhD-5-044",
                "bhD-5-045",
                "bhD-5-046",
                "bhD-5-047",
                "bhD-5-048",
                "bhD-5-049",
                "bhD-5-050",
                "bhD-5-051",
                "bhD-5-052",
                "bhD-5-053",
                "bhD-5-054",
                "bhD-5-055",
                "bhD-5-056",
                "bhD-5-057",
                "bhD-5-058",
                "bhD-5-059",
                "bhD-5-060",
                "bhD-5-061",
                "bhD-5-062",
                "bhD-5-063",
                "bhD-5-064",
                "bhD-5-065",
                "bhD-5-066",
                "bhD-5-067",
                "bhD-5-068",
                "bhD-5-069",
                "bhD-5-070",
                "bhD-5-071",
                "bhD-5-072",
                "bhD-5-073",
                "bhD-5-074",
                "bhD-5-075",
                "bhD-5-076",
                "bhD-5-077",
                "bhD-5-078",
                "bhD-5-079",
                "bhD-5-080",
                "bhD-5-081",
                "bhD-5-082",
                "bhD-5-083",
                "bhD-5-084",
                "bhD-5-085",
                "bhD-5-086",
                "bhD-5-087",
                "bhD-5-088",
                "bhD-5-089",
                "bhD-5-090",
                "bhD-5-091",
                "bhD-5-092",
                "bhD-5-093",
                "bhD-5-094",
                "bhD-5-095",
                "bhD-5-096",
                "bhD-5-097",
                "bhD-5-098",
                "bhD-5-099",
                "bhD-5-100",
                "bhD-6-001",
                "bhD-6-002",
                "bhD-6-003",
                "bhD-6-004",
                "bhD-6-005",
                "bhD-6-006",
                "bhD-6-007",
                "bhD-6-008",
                "bhD-6-009",
                "bhD-6-010",
                "bhD-6-011",
                "bhD-6-012",
                "bhD-6-013",
                "bhD-6-014",
                "bhD-6-015",
                "bhD-6-016",
                "bhD-6-017",
                "bhD-6-018",
                "bhD-6-019",
                "bhD-6-020",
                "bhD-6-021",
                "bhD-6-022",
                "bhD-6-023",
                "bhD-6-024",
                "bhD-6-025",
                "bhD-6-026",
                "bhD-6-027",
                "bhD-6-028",
                "bhD-6-029",
                "bhD-6-030",
                "bhD-6-031",
                "bhD-6-032",
                "bhD-6-033",
                "bhD-6-034",
                "bhD-6-035",
                "bhD-6-036",
                "bhD-6-037",
                "bhD-6-038",
                "bhD-6-039",
                "bhD-6-040",
                "bhD-6-041",
                "bhD-6-042",
                "bhD-6-043",
                "bhD-6-044",
                "bhD-6-045",
                "bhD-6-046",
                "bhD-6-047",
                "bhD-6-048",
                "bhD-6-049",
                "bhD-6-050",
                "bhD-6-051",
                "bhD-6-052",
                "bhD-6-053",
                "bhD-6-054",
                "bhD-6-055",
                "bhD-6-056",
                "bhD-6-057",
                "bhD-6-058",
                "bhD-6-059",
                "bhD-6-060",
                "bhD-6-061",
                "bhD-6-062",
                "bhD-6-063",
                "bhD-6-064",
                "bhD-6-065",
                "bhD-6-066",
                "bhD-6-067",
                "bhD-6-068",
                "bhD-6-069",
                "bhD-6-070",
                "bhD-6-071",
                "bhD-6-072",
                "bhD-6-073",
                "bhD-6-074",
                "bhD-6-075",
                "bhD-6-076",
                "bhD-6-077",
                "bhD-6-078",
                "bhD-6-079",
                "bhD-6-080",
                "bhD-6-081",
                "bhD-6-082",
                "bhD-6-083",
                "bhD-6-084",
                "bhD-6-085",
                "bhD-6-086",
                "bhD-6-087",
                "bhD-6-088",
                "bhD-6-089",
                "bhD-6-090",
                "bhD-6-091",
                "bhD-6-092",
                "bhD-6-093",
                "bhD-6-094",
                "bhD-6-095",
                "bhD-6-096",
                "bhD-6-097",
                "bhD-6-098",
                "bhD-6-099",
                "bhD-6-100",
                "bhS-3-001",
                "bhS-3-002",
                "bhS-3-003",
                "bhS-3-004",
                "bhS-3-005",
                "bhS-3-006",
                "bhS-3-007",
                "bhS-3-008",
                "bhS-3-009",
                "bhS-3-010",
                "bhS-3-011",
                "bhS-3-012",
                "bhS-3-013",
                "bhS-3-014",
                "bhS-3-015",
                "bhS-3-016",
                "bhS-3-017",
                "bhS-3-018",
                "bhS-3-019",
                "bhS-3-020",
                "bhS-3-021",
                "bhS-3-022",
                "bhS-3-023",
                "bhS-3-024",
                "bhS-3-025",
                "bhS-3-026",
                "bhS-3-027",
                "bhS-3-028",
                "bhS-3-029",
                "bhS-3-030",
                "bhS-3-031",
                "bhS-3-032",
                "bhS-3-033",
                "bhS-3-034",
                "bhS-3-035",
                "bhS-3-036",
                "bhS-3-037",
                "bhS-3-038",
                "bhS-3-039",
                "bhS-3-040",
                "bhS-3-041",
                "bhS-3-042",
                "bhS-3-043",
                "bhS-3-044",
                "bhS-3-045",
                "bhS-3-046",
                "bhS-3-047",
                "bhS-3-048",
                "bhS-3-049",
                "bhS-3-050",
                "bhS-3-051",
                "bhS-3-052",
                "bhS-3-053",
                "bhS-3-054",
                "bhS-3-055",
                "bhS-3-056",
                "bhS-3-057",
                "bhS-3-058",
                "bhS-3-059",
                "bhS-3-060",
                "bhS-3-061",
                "bhS-3-062",
                "bhS-3-063",
                "bhS-3-064",
                "bhS-3-065",
                "bhS-3-066",
                "bhS-3-067",
                "bhS-3-068",
                "bhS-3-069",
                "bhS-3-070",
                "bhS-3-071",
                "bhS-3-072",
                "bhS-3-073",
                "bhS-3-074",
                "bhS-3-075",
                "bhS-3-076",
                "bhS-3-077",
                "bhS-3-078",
                "bhS-3-079",
                "bhS-3-080",
                "bhS-3-081",
                "bhS-3-082",
                "bhS-3-083",
                "bhS-3-084",
                "bhS-3-085",
                "bhS-3-086",
                "bhS-3-087",
                "bhS-3-088",
                "bhS-3-089",
                "bhS-3-090",
                "bhS-3-091",
                "bhS-3-092",
                "bhS-3-093",
                "bhS-3-094",
                "bhS-3-095",
                "bhS-3-096",
                "bhS-3-097",
                "bhS-3-098",
                "bhS-3-099",
                "bhS-3-100",
                "bhS-4-001",
                "bhS-4-002",
                "bhS-4-003",
                "bhS-4-004",
                "bhS-4-005",
                "bhS-4-006",
                "bhS-4-007",
                "bhS-4-008",
                "bhS-4-009",
                "bhS-4-010",
                "bhS-4-011",
                "bhS-4-012",
                "bhS-4-013",
                "bhS-4-014",
                "bhS-4-015",
                "bhS-4-016",
                "bhS-4-017",
                "bhS-4-018",
                "bhS-4-019",
                "bhS-4-020",
                "bhS-4-021",
                "bhS-4-022",
                "bhS-4-023",
                "bhS-4-024",
                "bhS-4-025",
                "bhS-4-026",
                "bhS-4-027",
                "bhS-4-028",
                "bhS-4-029",
                "bhS-4-030",
                "bhS-4-031",
                "bhS-4-032",
                "bhS-4-033",
                "bhS-4-034",
                "bhS-4-035",
                "bhS-4-036",
                "bhS-4-037",
                "bhS-4-038",
                "bhS-4-039",
                "bhS-4-040",
                "bhS-4-041",
                "bhS-4-042",
                "bhS-4-043",
                "bhS-4-044",
                "bhS-4-045",
                "bhS-4-046",
                "bhS-4-047",
                "bhS-4-048",
                "bhS-4-049",
                "bhS-4-050",
                "bhS-4-051",
                "bhS-4-052",
                "bhS-4-053",
                "bhS-4-054",
                "bhS-4-055",
                "bhS-4-056",
                "bhS-4-057",
                "bhS-4-058",
                "bhS-4-059",
                "bhS-4-060",
                "bhS-4-061",
                "bhS-4-062",
                "bhS-4-063",
                "bhS-4-064",
                "bhS-4-065",
                "bhS-4-066",
                "bhS-4-067",
                "bhS-4-068",
                "bhS-4-069",
                "bhS-4-070",
                "bhS-4-071",
                "bhS-4-072",
                "bhS-4-073",
                "bhS-4-074",
                "bhS-4-075",
                "bhS-4-076",
                "bhS-4-077",
                "bhS-4-078",
                "bhS-4-079",
                "bhS-4-080",
                "bhS-4-081",
                "bhS-4-082",
                "bhS-4-083",
                "bhS-4-084",
                "bhS-4-085",
                "bhS-4-086",
                "bhS-4-087",
                "bhS-4-088",
                "bhS-4-089",
                "bhS-4-090",
                "bhS-4-091",
                "bhS-4-092",
                "bhS-4-093",
                "bhS-4-094",
                "bhS-4-095",
                "bhS-4-096",
                "bhS-4-097",
                "bhS-4-098",
                "bhS-4-099",
                "bhS-4-100",
                "bhS-5-001",
                "bhS-5-002",
                "bhS-5-003",
                "bhS-5-004",
                "bhS-5-005",
                "bhS-5-006",
                "bhS-5-007",
                "bhS-5-008",
                "bhS-5-009",
                "bhS-5-010",
                "bhS-5-011",
                "bhS-5-012",
                "bhS-5-013",
                "bhS-5-014",
                "bhS-5-015",
                "bhS-5-016",
                "bhS-5-017",
                "bhS-5-018",
                "bhS-5-019",
                "bhS-5-020",
                "bhS-5-021",
                "bhS-5-022",
                "bhS-5-023",
                "bhS-5-024",
                "bhS-5-025",
                "bhS-5-026",
                "bhS-5-027",
                "bhS-5-028",
                "bhS-5-029",
                "bhS-5-030",
                "bhS-5-031",
                "bhS-5-032",
                "bhS-5-033",
                "bhS-5-034",
                "bhS-5-035",
                "bhS-5-036",
                "bhS-5-037",
                "bhS-5-038",
                "bhS-5-039",
                "bhS-5-040",
                "bhS-5-041",
                "bhS-5-042",
                "bhS-5-043",
                "bhS-5-044",
                "bhS-5-045",
                "bhS-5-046",
                "bhS-5-047",
                "bhS-5-048",
                "bhS-5-049",
                "bhS-5-050",
                "bhS-5-051",
                "bhS-5-052",
                "bhS-5-053",
                "bhS-5-054",
                "bhS-5-055",
                "bhS-5-056",
                "bhS-5-057",
                "bhS-5-058",
                "bhS-5-059",
                "bhS-5-060",
                "bhS-5-061",
                "bhS-5-062",
                "bhS-5-063",
                "bhS-5-064",
                "bhS-5-065",
                "bhS-5-066",
                "bhS-5-067",
                "bhS-5-068",
                "bhS-5-069",
                "bhS-5-070",
                "bhS-5-071",
                "bhS-5-072",
                "bhS-5-073",
                "bhS-5-074",
                "bhS-5-075",
                "bhS-5-076",
                "bhS-5-077",
                "bhS-5-078",
                "bhS-5-079",
                "bhS-5-080",
                "bhS-5-081",
                "bhS-5-082",
                "bhS-5-083",
                "bhS-5-084",
                "bhS-5-085",
                "bhS-5-086",
                "bhS-5-087",
                "bhS-5-088",
                "bhS-5-089",
                "bhS-5-090",
                "bhS-5-091",
                "bhS-5-092",
                "bhS-5-093",
                "bhS-5-094",
                "bhS-5-095",
                "bhS-5-096",
                "bhS-5-097",
                "bhS-5-098",
                "bhS-5-099",
                "bhS-5-100",
                "bhS-6-001",
                "bhS-6-002",
                "bhS-6-003",
                "bhS-6-004",
                "bhS-6-005",
                "bhS-6-006",
                "bhS-6-007",
                "bhS-6-008",
                "bhS-6-009",
                "bhS-6-010",
                "bhS-6-011",
                "bhS-6-012",
                "bhS-6-013",
                "bhS-6-014",
                "bhS-6-015",
                "bhS-6-016",
                "bhS-6-017",
                "bhS-6-018",
                "bhS-6-019",
                "bhS-6-020",
                "bhS-6-021",
                "bhS-6-022",
                "bhS-6-023",
                "bhS-6-024",
                "bhS-6-025",
                "bhS-6-026",
                "bhS-6-027",
                "bhS-6-028",
                "bhS-6-029",
                "bhS-6-030",
                "bhS-6-031",
                "bhS-6-032",
                "bhS-6-033",
                "bhS-6-034",
                "bhS-6-035",
                "bhS-6-036",
                "bhS-6-037",
                "bhS-6-038",
                "bhS-6-039",
                "bhS-6-040",
                "bhS-6-041",
                "bhS-6-042",
                "bhS-6-043",
                "bhS-6-044",
                "bhS-6-045",
                "bhS-6-046",
                "bhS-6-047",
                "bhS-6-048",
                "bhS-6-049",
                "bhS-6-050",
                "bhS-6-051",
                "bhS-6-052",
                "bhS-6-053",
                "bhS-6-054",
                "bhS-6-055",
                "bhS-6-056",
                "bhS-6-057",
                "bhS-6-058",
                "bhS-6-059",
                "bhS-6-060",
                "bhS-6-061",
                "bhS-6-062",
                "bhS-6-063",
                "bhS-6-064",
                "bhS-6-065",
                "bhS-6-066",
                "bhS-6-067",
                "bhS-6-068",
                "bhS-6-069",
                "bhS-6-070",
                "bhS-6-071",
                "bhS-6-072",
                "bhS-6-073",
                "bhS-6-074",
                "bhS-6-075",
                "bhS-6-076",
                "bhS-6-077",
                "bhS-6-078",
                "bhS-6-079",
                "bhS-6-080",
                "bhS-6-081",
                "bhS-6-082",
                "bhS-6-083",
                "bhS-6-084",
                "bhS-6-085",
                "bhS-6-086",
                "bhS-6-087",
                "bhS-6-088",
                "bhS-6-089",
                "bhS-6-090",
                "bhS-6-091",
                "bhS-6-092",
                "bhS-6-093",
                "bhS-6-094",
                "bhS-6-095",
                "bhS-6-096",
                "bhS-6-097",
                "bhS-6-098",
                "bhS-6-099",
                "bhS-6-100",
            ],
        }
    )


@dataclass
class Steiner(BaseDataset):
    """Class representing a Steiner dataset."""

    name: str = "04_steiner"
    description: str = (
        "Steiner dataset in ommx format, originally provided by https://git.zib.de/qopt/qoblib-quantum-optimization-benchmarking-library/-/tree/main/04-steiner?ref_type=heads."
    )
    model_names: list[str] = field(default_factory=lambda: ["integer_linear"])
    available_instances: Final[dict[str, list[str]]] = field(
        default_factory=lambda: {
            "integer_linear": [
                "stp_s020_l2_t3_h2_rs24098",
                "stp_s020_l2_t3_h3_rs97531",
                "stp_s020_l2_t4_h0_rs24098",
                "stp_s020_l2_t4_h3_rs37235",
                "stp_s020_l3_t3_h2_rs24098",
                "stp_s020_l3_t4_h0_rs24098",
                "stp_s020_l3_t4_h2_rs97531",
                "stp_s020_l3_t4_h3_rs97531",
                "stp_s020_l4_t3_h3_rs97531",
                "stp_s020_l4_t4_h0_rs24098",
                "stp_s020_l4_t4_h3_rs37235",
                "stp_s020_l5_t3_h3_rs24098",
                "stp_s020_l5_t4_h0_rs24098",
                "stp_s020_l5_t4_h3_rs24098",
                "stp_s030_l2_t3_h1_rs97531",
                "stp_s030_l2_t3_h3_rs97531",
                "stp_s030_l2_t4_h2_rs97531",
                "stp_s030_l2_t5_h1_rs24098",
                "stp_s030_l3_t3_h1_rs97531",
                "stp_s030_l3_t3_h2_rs97531",
                "stp_s030_l3_t4_h0_rs97531",
                "stp_s030_l3_t5_h1_rs24098",
                "stp_s030_l4_t3_h1_rs97531",
                "stp_s030_l4_t4_h0_rs97531",
                "stp_s030_l4_t4_h2_rs97531",
                "stp_s030_l5_t3_h1_rs97531",
                "stp_s030_l5_t4_h0_rs24098",
                "stp_s040_l2_t3_h0_rs97531",
                "stp_s040_l2_t3_h2_rs24098",
                "stp_s040_l2_t4_h0_rs97531",
                "stp_s040_l2_t4_h3_rs123",
            ],
        }
    )


@dataclass
class Sports(BaseDataset):
    """Class representing a Sports dataset."""

    name: str = "05_sports"
    description: str = (
        "Sports dataset in ommx format, originally provided by https://git.zib.de/qopt/qoblib-quantum-optimization-benchmarking-library/-/tree/main/05-sports?ref_type=heads."
    )
    model_names: list[str] = field(default_factory=lambda: ["mixed_integer_linear"])
    available_instances: dict[str, list[str]] = field(
        default_factory=lambda: {"mixed_integer_linear": []}
    )


@dataclass
class Portfolio(BaseDataset):
    """Class representing a Portfolio dataset."""

    name: str = "06_portfolio"
    description: str = (
        "Portfolio dataset in ommx format, originally provided by https://git.zib.de/qopt/qoblib-quantum-optimization-benchmarking-library/-/tree/main/06-portfolio?ref_type=heads."
    )
    model_names: list[str] = field(
        default_factory=lambda: ["binary_quadratic", "quadratic_unconstrained"]
    )
    available_instances: dict[str, list[str]] = field(
        default_factory=lambda: {"binary_quadratic": [], "quadratic_unconstrained": []}
    )


@dataclass
class IndependentSet(BaseDataset):
    """Class representing an Independent Set dataset."""

    name: str = "07_independentset"
    description: str = (
        "Independent Set dataset in ommx format, originally provided by https://git.zib.de/qopt/qoblib-quantum-optimization-benchmarking-library/-/tree/main/07-independentset?ref_type=heads."
    )
    model_names: list[str] = field(
        default_factory=lambda: ["binary_linear", "binary_unconstrained"]
    )
    available_instances: dict[str, list[str]] = field(
        default_factory=lambda: {
            "binary_linear": [
                "aves-sparrow-social",
                "brock200_2",
                "brock400_1",
                "brock800_1",
                "C125-9",
                "C125.9",
                "C4000-5",
                "C500-9",
                "C500.9",
                "chesapeake",
                "es60fst01",
                "es60fst02",
                "es60fst03",
                "es60fst04",
                "farm",
                "football",
                "frb100-40",
                "frb45-21-3",
                "frb50-23-3",
                "frb53-24-1",
                "frb59-26-2",
                "gen200_p0-9_44",
                "hamming10-4",
                "ibm32",
                "insecta-ant-colony1-day38",
                "insecta-ant-colony3-day09",
                "karate",
                "keller4",
                "keller6",
                "mammalia-kangaroo-interactions",
                "p_hat1500-1",
                "p_hat1500-3",
                "R_1000_005_1",
                "R_500_005_1",
                "sloane_1dc_128",
                "sloane_1dc_64",
                "sloane_1zc_128",
                "sloane_2dc_128",
                "socfb-haverford76",
                "socfb-trinity100",
                "sorrell4",
                "sorrell7",
            ],
            "binary_unconstrained": [
                "aves-sparrow-social",
                "brock200_2",
                "brock400_1",
                "brock800_1",
                "C125-9",
                "C125.9",
                "C4000-5",
                "C500-9",
                "C500.9",
                "chesapeake",
                "es60fst01",
                "es60fst02",
                "es60fst03",
                "es60fst04",
                "farm",
                "football",
                "frb100-40",
                "frb45-21-3",
                "frb50-23-3",
                "frb53-24-1",
                "frb59-26-2",
                "gen200_p0-9_44",
                "hamming10-4",
                "ibm32",
                "insecta-ant-colony1-day38",
                "insecta-ant-colony3-day09",
                "karate",
                "keller4",
                "keller6",
                "mammalia-kangaroo-interactions",
                "p_hat1500-1",
                "p_hat1500-3",
                "R_1000_005_1",
                "R_500_005_1",
                "sloane_1dc_128",
                "sloane_1dc_64",
                "sloane_1zc_128",
                "sloane_2dc_128",
                "socfb-haverford76",
                "socfb-trinity100",
                "sorrell4",
                "sorrell7",
            ],
        }
    )


@dataclass
class Network(BaseDataset):
    """Class representing a Network dataset."""

    name: str = "08_network"
    description: str = (
        "Network dataset in ommx format, originally provided by https://git.zib.de/qopt/qoblib-quantum-optimization-benchmarking-library/-/tree/main/08-network?ref_type=heads."
    )
    model_names: list[str] = field(default_factory=lambda: ["integer_lp"])
    available_instances: dict[str, list[str]] = field(
        default_factory=lambda: {
            "integer_lp": [
                "network05",
                "network06",
                "network07",
                "network08",
                "network09",
                "network10",
                "network11",
                "network12",
                "network13",
                "network14",
                "network15",
                "network16",
                "network17",
                "network18",
                "network19",
                "network20",
                "network21",
                "network22",
                "network23",
                "network24",
            ]
        }
    )


@dataclass
class Routing(BaseDataset):
    """Class representing a Routing dataset."""

    name: str = "09_routing"
    description: str = (
        "Routing dataset in ommx format, originally provided by https://git.zib.de/qopt/qoblib-quantum-optimization-benchmarking-library/-/tree/main/09-routing?ref_type=heads."
    )
    model_names: list[str] = field(default_factory=lambda: ["integer_linear"])
    available_instances: dict[str, list[str]] = field(
        default_factory=lambda: {
            "integer_linear": [
                "XSH-n20-k4-01",
                "XSH-n20-k4-02",
                "XSH-n20-k4-03",
                "XSH-n20-k4-04",
                "XSH-n20-k4-05",
                "XSH-n20-k4-06",
                "XSH-n20-k4-07",
                "XSH-n20-k4-08",
                "XSH-n20-k4-09",
                "XSH-n20-k4-10",
                "XSH-n20-k4-11",
                "XSH-n20-k4-12",
                "XSH-n20-k4-13",
                "XSH-n20-k4-14",
                "XSH-n20-k4-15",
                "XSH-n20-k4-16",
                "XSH-n20-k4-17",
                "XSH-n20-k4-18",
                "XSH-n20-k4-19",
                "XSH-n20-k4-20",
                "XSH-n20-k4-21",
                "XSH-n20-k4-22",
                "XSH-n20-k4-23",
                "XSH-n20-k4-24",
                "XSH-n20-k4-25",
                "XSH-n20-k4-26",
                "XSH-n20-k4-27",
                "XSH-n20-k4-28",
                "XSH-n20-k4-29",
                "XSH-n20-k4-30",
                "XSH-n20-k4-31",
                "XSH-n20-k4-32",
                "XSH-n20-k4-33",
                "XSH-n20-k4-34",
                "XSH-n20-k4-35",
                "XSH-n20-k4-36",
                "XSH-n20-k4-37",
                "XSH-n20-k4-38",
                "XSH-n20-k4-39",
                "XSH-n20-k4-40",
                "XSH-n20-k4-41",
                "XSH-n20-k4-42",
                "XSH-n20-k4-43",
                "XSH-n20-k4-44",
                "XSH-n20-k4-45",
                "XSH-n20-k4-46",
                "XSH-n20-k4-47",
                "XSH-n20-k4-48",
                "XSH-n20-k4-49",
                "XSH-n20-k4-50",
                "XSH-n20-k4-51",
                "XSH-n20-k4-52",
                "XSH-n20-k4-53",
                "XSH-n20-k4-54",
                "XSH-n20-k4-55",
            ]
        }
    )


@dataclass
class Topology(BaseDataset):
    """Class representing a Topology dataset."""

    name: str = "10_topology"
    description: str = (
        "Topology dataset in ommx format, originally provided by https://git.zib.de/qopt/qoblib-quantum-optimization-benchmarking-library/-/tree/main/10-topology?ref_type=heads."
    )
    model_names: list[str] = field(
        default_factory=lambda: ["flow_mip", "seidel_linear", "seidel_quadratic"]
    )
    available_instances: Final[dict[str, list[str]]] = field(
        default_factory=lambda: {
            "flow_mip": [
                "topology_15_3",
                "topology_15_4",
                "topology_20_3",
                "topology_20_4",
                "topology_20_5",
                "topology_25_3",
                "topology_25_4",
                "topology_25_5",
                "topology_25_6",
                "topology_30_4",
                "topology_30_5",
                "topology_30_6",
                "topology_35_5",
                "topology_35_6",
                "topology_40_6",
                "topology_50_4",
            ],
            "seidel_linear": [
                "topology_15_3",
                "topology_15_4",
                "topology_20_3",
                "topology_20_4",
                "topology_20_5",
                "topology_25_3",
                "topology_25_4",
                "topology_25_5",
                "topology_25_6",
                "topology_30_4",
                "topology_30_5",
                "topology_30_6",
                "topology_35_5",
                "topology_35_6",
                "topology_40_6",
                "topology_50_4",
            ],
            "seidel_quadratic": [
                "topology_15_3",
                "topology_15_4",
                "topology_20_3",
                "topology_20_4",
                "topology_20_5",
                "topology_25_3",
                "topology_25_4",
                "topology_25_5",
                "topology_25_6",
                "topology_30_4",
                "topology_30_5",
                "topology_30_6",
                "topology_35_5",
                "topology_35_6",
                "topology_40_6",
                "topology_50_4",
            ],
        }
    )
